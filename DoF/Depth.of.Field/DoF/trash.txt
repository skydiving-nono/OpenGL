- (void)render:(CADisplayLink*)displayLink {
    printf("\n\nrender\n\n");
    int i, j, min, max, count;
    GLfloat scale, dx, dy;
    
    min = -2; max = -min + 1;
    count = -2 * min + 1; count *= count;
    scale = 2.0f;
    
    glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
    glEnable(GL_BLEND);
    
    glClearColor(0.4, 0.6, 0.8, 1.0);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glEnable(GL_DEPTH_TEST);        
    
    CC3GLMatrix *projection = [CC3GLMatrix matrix];
    float h = 4.0f * self.frame.size.height / self.frame.size.width;
    [projection populateFromFrustumLeft:-2 andRight:2 andBottom:-h/2 andTop:h/2 andNear:4 andFar:10];
    glUniformMatrix4fv(_projectionUniform, 1, 0, projection.glMatrix);
    
    CC3GLMatrix *modelView = [CC3GLMatrix matrix];
//    [modelView populateFromTranslation:CC3VectorMake(sin(CACurrentMediaTime()), 0, -7)];
[modelView populateFromTranslation:CC3VectorMake(0, 0, -3)];
//    _currentRotation += displayLink.duration * 90;
    [modelView rotateBy:CC3VectorMake(_currentRotation, _currentRotation, 0)];
    glUniformMatrix4fv(_modelViewUniform, 1, 0, modelView.glMatrix);
    
//    for (j = min; j < max; j++) {
//        for (i = min; i< max; i++){
//            dx = scale * i * NEAR/objectDepth;
//            dy = scale * j * NEAR/objectDepth;
//            
//            [projection populateFromFrustumLeft:-DIM + dx andRight:DIM + dx andBottom:-DIM + dy andTop:DIM + dy andNear:NEAR andFar:FAR];
//            glUniformMatrix4fv(_projectionUniform, 1, 0, projection.glMatrix);
////            [modelView populateFromTranslation:CC3VectorMake(0, 0, 0)];
//            
//            printf("focus\n");
//            
//        }
//    }
    
    // 1
    glViewport(0, 0, self.frame.size.width, self.frame.size.height);
        
    glBindBuffer(GL_ARRAY_BUFFER, _vertexBuffer);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, _indexBuffer);
    
    // 2
    glVertexAttribPointer(_positionSlot, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), 0);
    glVertexAttribPointer(_colorSlot, 4, GL_FLOAT, GL_FALSE, sizeof(Vertex), (GLvoid*) (sizeof(float) * 3));
    
    glVertexAttribPointer(_texCoordSlot, 2, GL_FLOAT, GL_FALSE, sizeof(Vertex), (GLvoid*) (sizeof(float) * 7));    
    
    glActiveTexture(GL_TEXTURE0); 
    glBindTexture(GL_TEXTURE_2D, _rockTexture);
    glUniform1i(_textureUniform, 0);
    
    // 3
    glDrawElements(GL_TRIANGLES, sizeof(wallIndices)/sizeof(wallIndices[0]), GL_UNSIGNED_BYTE, 0);
    
    glBindBuffer(GL_ARRAY_BUFFER, _vertexBuffer2);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, _indexBuffer2);

    //glActiveTexture(GL_TEXTURE0); // unneccc in practice
    glBindTexture(GL_TEXTURE_2D, _objectTexture);
    //glUniform1i(_textureUniform, 0); // unnecc in practice

    glUniformMatrix4fv(_modelViewUniform, 1, 0, modelView.glMatrix);

    glVertexAttribPointer(_positionSlot, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), 0);
    glVertexAttribPointer(_colorSlot, 4, GL_FLOAT, GL_FALSE, sizeof(Vertex), (GLvoid*) (sizeof(float) * 3));
    glVertexAttribPointer(_texCoordSlot, 2, GL_FLOAT, GL_FALSE, sizeof(Vertex), (GLvoid*) (sizeof(float) * 7));

    glDrawElements(GL_TRIANGLE_STRIP, sizeof(objectIndices)/sizeof(objectIndices[0]), GL_UNSIGNED_BYTE, 0);
    
    // 4
    glDrawElements(GL_TRIANGLES, sizeof(wallIndices)/sizeof(wallIndices[0]), GL_UNSIGNED_BYTE, 0);
    
    glBindBuffer(GL_ARRAY_BUFFER, _vertexBuffer3);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, _indexBuffer3);
    
    //glActiveTexture(GL_TEXTURE0); // unneccc in practice
    glBindTexture(GL_TEXTURE_2D, _floorTexture);
    //glUniform1i(_textureUniform, 0); // unnecc in practice
    
    glUniformMatrix4fv(_modelViewUniform, 1, 0, modelView.glMatrix);
    
    glVertexAttribPointer(_positionSlot, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), 0);
    glVertexAttribPointer(_colorSlot, 4, GL_FLOAT, GL_FALSE, sizeof(Vertex), (GLvoid*) (sizeof(float) * 3));
    glVertexAttribPointer(_texCoordSlot, 2, GL_FLOAT, GL_FALSE, sizeof(Vertex), (GLvoid*) (sizeof(float) * 7));
    
    glDrawElements(GL_TRIANGLE_STRIP, sizeof(Indices3)/sizeof(Indices3[0]), GL_UNSIGNED_BYTE, 0);
    
    [_context presentRenderbuffer:GL_RENDERBUFFER];
//        }
//    }
}




========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
original implementation of wall, floor, and object information


typedef struct {
    float Position[3];
    float Color[4];
    float TexCoord[2]; // New
} Vertex;

/*const Vertex Vertices[] = {
    {{1, -1, 0}, {1, 0, 0, 1}},
    {{1, 1, 0}, {0, 1, 0, 1}},
    {{-1, 1, 0}, {0, 0, 1, 1}},
    {{-1, -1, 0}, {0, 0, 0, 1}}
};

const GLubyte Indices[] = {
     0, 1, 2,
     2, 3, 0
};*/

#define TEX_COORD_MAX   4
#define ZFRONT 0
#define ZBACK -2.5

const Vertex Walls[] = {
    // Back
    {{1, -1, -2.5},  {1, 1, 1, 1}, {TEX_COORD_MAX, 0}},
    {{1, 1, -2.5},   {1, 1, 1, 1}, {TEX_COORD_MAX, TEX_COORD_MAX}},
    {{-1, 1, -2.5},  {1, 1, 1, 1}, {0, TEX_COORD_MAX}},
    {{-1, -1, -2.5}, {1, 1, 1, 1}, {0, 0}},
    // Nothing
//    {{1, -1, -2},  {1, 0, 0, 1}, {TEX_COORD_MAX, 0}},
//    {{-1, -1, -2}, {0, 1, 0, 1}, {TEX_COORD_MAX, TEX_COORD_MAX}},
//    {{1, -1, -2},  {0, 0, 1, 1}, {0, TEX_COORD_MAX}},
//    {{-1, 1, -2},  {0, 0, 0, 1}, {0, 0}},
    
    // Left
    {{-3.5, -6.25, ZFRONT},  {1,1,1,1},  {4, 0}},
    {{-3.5, 5.8, ZFRONT},   {.5, .5, .5, 1},  {4,4}},
    {{-1,   1, -2.5},     {1, 1, 1, 1},  {0, 4}},
    {{-1,   -1, -2.5},    {1, 1, 1, 1},  {0, 0}},
    // Right
    {{1, -1, -2.5},  {1, 1, 1, 1}, {4, 0}},
    {{1, 1, -2.5},   {1, 1, 1, 1}, {4, 4}},
    {{3.5, 5.8, ZFRONT},      {.5, .5, .5, 1}, {0, 4}},
    {{3.5, -6.25, ZFRONT},     {.5, .5, .5, 1}, {0, 0}},
    // Top
    {{3.5, 5.8, ZFRONT},    {.5, .5, .5, .8},  {0, 0}},
    {{1, 1, -2.5},          {1, 1, 1, .8},      {0, 0}},
    {{-1, 1, -2.5},         {1, 1, 1, .8},      {0, 0}},
    {{-3.5, 5.8, ZFRONT},   {.5, .5, .5, .8},  {0, 0}},
    
//    {{-3.5, -6.25, ZFRONT},    {0, 0, 0, .1},  {4, 0}},
//    {{-3.5, 5.8, ZFRONT},          {0, 0, 0, .5},      {4, 4}},
//    {{3.5, 5.8, ZFRONT},         {0, 0, 0, .5},      {0, 4}},
//    {{3.5, -6.25, ZFRONT},   {0, 0, 0, .5},  {0, 0}},
    
    // Bottom
//    {{1, -1, -2.5},      {1, 1, 1, 1},      {TEX_COORD_MAX, 0}},
//    {{3.5, -4.5, ZFRONT},     {1, 1, 1, 1},      {TEX_COORD_MAX, TEX_COORD_MAX}},
//    {{-3.5, -4.5, ZFRONT},    {1, 1, 1, 1},      {0, TEX_COORD_MAX}},
//    {{-1, -1, -2.5},     {1, 1, 1, 1},      {0, 0}}
};

const GLubyte wallIndices[] = {
    // Back
    0, 1, 2,
    2, 3, 0,
    // Left
    4, 5, 6,
    6, 7, 4,
    // Right
    8, 9, 10,
    10, 11, 8,
    // Top
    12, 13, 14,
    14, 15, 12,
    // Top
//    16, 17, 18,
//    18, 19, 16,
    // Bottom
//    20, 21, 22,
//    22, 23, 20
};

const int objectDepth = -2;

const Vertex objectVertices[] = {
    {{0.5, -0.5, objectDepth}, {1, 1, 1, 1}, {1, 1}},
    {{0.5, 0.5, objectDepth}, {1, 1, 1, 1}, {1, 0}},
    {{-0.5, 0.5, objectDepth}, {1, 1, 1, 1}, {0, 0}},
    {{-0.5, -0.5, objectDepth}, {1, 1, 1, 1}, {0, 1}},
};

const GLubyte objectIndices[] = {
    1, 0, 2, 3
};



const Vertex floorVertices[] = {
    {{1,      -1,  -2.5},      {1, 1, 1, 1},      {TEX_COORD_MAX, 0}},
    {{3.5,  -6.25,     0},   {1, 1, 1, 1},      {TEX_COORD_MAX, TEX_COORD_MAX}},
    {{-3.5, -6.25,     0},    {1, 1, 1, 1},      {0, TEX_COORD_MAX}},
    {{-1,     -1,  -2.5},     {1, 1, 1, 1},      {0, 0}}
};

const GLubyte Indices3[] = {
    0,1,2,2,3,0
};

========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================

-(UIImage *) glViewScreenshot {
    NSInteger myDataLength = 320 * 568 * 4;
    
    // pixelArray is going to be our buffer reading in all pixel data from glView
    GLubyte *pixelArray = (GLubyte *) malloc(myDataLength);
    
    /* pixelArray[] is filled here. glReadPixels is a very convinient function
     * that reads a block of pixels from the frame buffer. 
     * glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, 
     *      GLenum format, GLenum type, GLvoid* data);
     * x,y - specify window coordingates of first pixel read from frame buffer
     * width, height - dimentions of pixel rectangle; width, height = 1 indicate one pixel size
     * format - format of pixel data; I'm choosing normal GL_RGBA
     * type - specifies type of pixel data
     * data - returns pixel data, in this case puts data into our array
     * https://www.opengl.org/sdk/docs/man2/xhtml/glReadPixels.xml
     */
    glReadPixels(0, 0, 320, 568, GL_RGBA, GL_UNSIGNED_BYTE, pixelArray);
    
    // gl renders "upside down" so swap top to bottom into new array.
    // there's gotta be a better way, but this works.
//    GLubyte *pixelArray2 = (GLubyte *) malloc(myDataLength);
//    for(int y = 0; y < 568; y++)
//    {
//        for(int x = 0; x < 568 * 4; x++)
//        {
//            pixelArray2[(567 - y) * 320 * 4 + x] = pixelArray[y * 4 * 320 + x];
//        }
//    }
    
    // DataProvider does exactly what it says it does
    /* arguments: void info, const void *data, size_t size, callback releaseData
     * https://developer.apple.com/library/ios/documentation/graphicsimaging/Reference/CGDataProvider/Reference/reference.html
     */
    CGDataProviderRef provider = CGDataProviderCreateWithData(NULL, pixelArray, myDataLength, NULL);
    
    // prep the ingredients
    int bitsPerComponent = 8;
    int bitsPerPixel = 32;
    int bytesPerRow = 4 * 320;
    CGColorSpaceRef colorInfo = CGColorSpaceCreateDeviceRGB();
    CGBitmapInfo bitmapInfo = kCGBitmapByteOrderDefault;
    CGColorRenderingIntent renderingIntent = kCGRenderingIntentDefault;
    
    // Now that all of our data has been produced, we load it into an image
    /*
     * CGImageCreate Parameters:
     * size_t width, size_t height, size_t bitsPerComponent
     *  size_t bitsPerPixel, siz_t bytesPerRow
     *  CGColorSpaceRef colorspace,
     *  CGBitmapInfo bitmapInfo,
     *  CGDataProviderRef provider,
     *  const CGFloat decode[],
     *  bool shouldInterpolate,
     *  CGColorRenderingIntent intent
     */
    CGImageRef imageRef = CGImageCreate(320, 568, 8, 32, 4*320, colorInfo, bitmapInfo, provider, NULL, NO, renderingIntent);
    
    // Once our image has been prepared we produce a UIImage with it and return it
    UIImage *myImage = [UIImage imageWithCGImage:imageRef];
    return myImage;
}

========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================

- (void)colorBufferInit {
    glGenRenderbuffers(1, &_colorRenderBuffer);
    glBindRenderbuffer(GL_RENDERBUFFER, _colorRenderBuffer);
    [_context renderbufferStorage:GL_RENDERBUFFER fromDrawable:_eaglLayer];
}

- (void)depthBufferInit {
    glGenRenderbuffers(1, &_depthRenderBuffer);
    glBindRenderbuffer(GL_RENDERBUFFER, _depthRenderBuffer);
    glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH_COMPONENT16, self.frame.size.width, self.frame.size.height);    
}

- (void)frameBufferInit {    
    GLuint framebuffer;
    glGenFramebuffers(1, &framebuffer);
    glBindFramebuffer(GL_FRAMEBUFFER, framebuffer);   
    glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_RENDERBUFFER, _colorRenderBuffer);
    glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, _depthRenderBuffer);
}

...
....
.....
....
...
 - (id)initWithFrame:(CGRect)frame {
    self = [super initWithFrame:frame];
    if (self) {        
        . . .
//        [self depthBufferInit];
//        [self colorBufferInit];
//        [self frameBufferInit];
        . . .
    }
    return self;
}


========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================


- (void) focus {
    int i, j, min, max, count;
    GLfloat scale, dx, dy;
    
    min = -2; max = -min + 1;
    count = -2 * min + 1; count *= count;
    scale = 2.0f;
    
    CC3GLMatrix *projection = [CC3GLMatrix matrix];
    CC3GLMatrix *modelView = [CC3GLMatrix matrix];
    
    for (j = min; j < max; j++) {
        for (i = min; i< max; i++){
            dx = scale * i * NEAR/objectDepth;
            dy = scale * j * NEAR/objectDepth;
        
            [projection populateFromFrustumLeft:-DIM + dx andRight:DIM + dx andBottom:-DIM + dy andTop:DIM + dy andNear:NEAR andFar:FAR];
            glUniformMatrix4fv(_projectionUniform, 1, 0, projection.glMatrix);
            [modelView populateFromTranslation:CC3VectorMake(scale * i, scale * j, 0.f)];
            
            CADisplayLink* displayLink = [CADisplayLink displayLinkWithTarget:self selector:@selector(focus:)];
            [self render:(CADisplayLink*) displayLink];
            printf("focus");
            
        }
    }
}